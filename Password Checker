# -*- coding: utf-8 -*-
"""
Created on Fri Dec 30 17:29:41 2022

@author: mstevens
"""

## password checker project

## this is a program built using python that should be run from the command line using should accompany the password or username to be checked. example:
(in the command line): python file_name_for_this.py password_to_be_checked.

#this program makes use of the "pawned" API to check passwords aganist.
#-----------------------------------------------------------------------
# this imports the ability to input arguments via the command line, which is used in the function "main"
import sys
# this library allows you to import hashing functions, which allows us to run our password through a shah1 hashing algo
import hashlib

# purpose of using this module is that it allows us to make requests that can be obtained as if we are using a browser.
import requests

# this is the passwords API url. 'CMFDA' is a SHA21 hashed from the password : 'password123', its the first 5 elements from the hash, its used as the 
#input in the api
#url = 'https://api.pwnedpasswords.com/range/' + 'CBFDA'

#res = requests.get(url)
#print(res)

# this api works through hashing.
# hashing effectivly runs a plain-text passwork through a hashing algorithem to make it gibberish. this conceils what the actual password really is.
# there are different hashing algos, but the one this api uss is SHA1. hashing is a one-way function. 
# this api works via comparing the hashed password stored in a database to the inputted hashed password. Thus your comparing if the password is the same
# by comparing the hashed passwords to eachother. 
# this api actually works through using l-anonomotity, a modern security technique that sends info without revealing who you are.
# k-anomymitity works by only sending the first 5 letters of a hashed password to a database of hashed passwords 
#this api works by works by using k-anomymitity, sending the first 5 letters of a hashed password to a database of hashed passwords that only have the
# first 5 hashed elements of the password, and comparing those 5 hashed password elements to the 5 hashed password elements you inputted.

def request_api_data(query_char):
    url = 'https://api.pwnedpasswords.com/range/' + query_char
    res = requests.get(url)
    if res.status_code !=200:
        raise RuntimeError(f'Error Fetching: {res.status_code}, check the api and try again')
    return res

def get_password_leaks_count(hashes, hash_to_check):
    hashes = (line.split(':') for line in hashes.text.splitlines())
    for h, count in hashes:
        if h == hash_to_check:
            return count
    return 0
def pwned_api_check(password):
    sha1password = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
    first5_char, tail = sha1password[:5], sha1password[5:]
    response = request_api_data(first5_char)
    return get_password_leaks_count(response, tail)


# this main function inputs the arguments given in the command line as arguments, which is the password we want to check
def main(args):
    for password in args:
            count = pwned_api_check(password)
            if count:
                print(f'{password} was found {count} times. you should change your password')
            else: 
                print(f'{password} was not found. carry on!')
    return 'Done!'

# this only runs this file if it is the main file being run from the command line, not if it is being imported.
if __name__ == '__main__': 
    sys.exit(main(sys.argv[1:]))


    
